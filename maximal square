// Bottom Up DP
// calc the max possible sqaure to the top left side and using its value for next elements

// Time Complexity : O(MN)
// Space Complexity : O(MN)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {

        int maxlen = 0;

        int m = matrix.size();
        int n = matrix[0].size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                if(matrix[i - 1][j - 1] == '1') { // as dp contains extra row and col
                    // min between left, right, diag left + 1
                    dp[i][j] = 1 + min(dp[i - 1][j], min(dp[i][j - 1], dp[i - 1][j - 1]));
                    maxlen = max(maxlen, dp[i][j]);
                }
            }
        }
        return maxlen * maxlen;  // area
    }
};



// Bottom Up DP - 1D array
// calc the max possible sqaure to the top left side and using its value for next elements

// Time Complexity : O(MN)
// Space Complexity : O(N)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {

        int maxlen = 0;

        int m = matrix.size();
        int n = matrix[0].size();
        vector<int> dp(n + 1, 0);

        for(int i = 1; i <= m; i++) {
            int diagUp = 0;
            for(int j = 1; j <= n; j++) {
                int temp = dp[j];  // storing cur val
                if(matrix[i - 1][j - 1] == '1') {
                    dp[j] = 1 + min(dp[j], min(dp[j - 1], diagUp));
                    maxlen = max(maxlen, dp[j]);
                } else {
                    dp[j] = 0;
                }
                diagUp = temp; // updating diag val
            }
        }
        return maxlen * maxlen;
    }
};