//Time: O(mn)
//Space: O(mn)
class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) {
        int [] dp= new int [arr.length];
        Arrays.fill(dp,-1);
        return helper(0,k,arr,dp);
    }
    
    
    public int helper (int index, int k, int arr[],int [] dp){
        if(index>arr.length-1){return 0;}
        if(dp[index]!=-1){return dp[index];}
        int sum=0;
        int max=0;
        for( int i=index;i<index+k&&i<arr.length;i++){
         max=Math.max(arr[i],max);
         
         int value=max*(i-index+1);
         int ret= helper(i+1,k, arr,dp);
           sum=Math.max(sum,value+ret); 
        }
        return dp[index]=sum;
        
    }
}
