class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) {
        int dp[] = new int[arr.length];
        int max=0;
        
        for(int i=0;i<dp.length;i++){
            max=dp[i];
            for(int j=1;j<=k && i-j +1>=0;j++){
                max=Math.max(max, arr[i-j+1]);
                if(i-j>=0){
                   dp[i]=Math.max(dp[i], dp[i-j]+max*j); 
                }
                else{dp[i]=Math.max(dp[i], max*j);}
            }
            
        
        }
        return dp[arr.length-1];
    }
}

// Time complexity: O(m*k);
// Space complexity: O(m);
// Approach: repeated sumproblem is finding max sum of subarray partitions until they reach size k
