# Time Complexity - o(mn)
#Space Complexity - o(mn)
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        if not matrix or len(matrix[0]) == 0:
            return 0
        rows=len(matrix)
        cols=len(matrix[0])
        maximum=0
        for i in range(rows):
            for j in range(cols):
                if(matrix[i][j]=='1'):
                    curr=1
                    flag=True
                    while(i+curr<rows and j+curr<cols and flag):
                        # Rows
                        current_row=i+curr
                        while(current_row>=i):
                            if(matrix[current_row][j+curr]=='0'):
                                flag=False
                                break
                            current_row-=1
                        #cols
                        current_col=j+curr
                        while(current_col>=j):
                            if(matrix[i+curr][current_col]=='0'):
                                flag=False
                                break
                            current_col-=1
                        if(flag==True):
                            curr+=1
                    
                    maximum=max(maximum,curr)
        return maximum*maximum
                                
 ## DP SOLUTION
 
 class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        if not matrix or len(matrix[0]) == 0:
            return 0
        rows=len(matrix)
        cols=len(matrix[0])
        dp=[[0 for i in range(cols+1)] for j in range(rows+1)]
        maximum=0
        for i in range(1,rows+1):
            for j in range(1,cols+1):
                if(matrix[i-1][j-1]=='1'):
                    dp[i][j]=min(dp[i-1][j],dp[i-1][j-1],dp[i][j-1])+1
                maximum=max(maximum,dp[i][j])
        return maximum*maximum

 
