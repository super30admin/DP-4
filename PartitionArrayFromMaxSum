//TC - o(n*k)
//SC - o(n)
class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) {
        
        if(arr == null || arr.length == 0)
            return 0;
        
        int [] dp = new int [arr.length];
        
        for(int i =0; i<arr.length;i++){
            int max = arr[i];
            //we can not make k partitions between i to i-k
            for(int j=1;j<=k && i-j+1 >=0;j++){
                //max util now
                max = Math.max(max,arr[i-j+1]);
                //we can add only the previous val from k+1 index
                if(i-j >=0) {
                    dp[i] = Math.max(dp[i],max*j+dp[i-j]);
                } else {
                     dp[i] = Math.max(dp[i],max*j);
                }
            }
        }
        
        return dp[arr.length - 1];
    }
}