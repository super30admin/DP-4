// DP

// Time Complexity : O(NK) where K is the number of partitions and N is the size of the array
// Space Complexity : O(N)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No

class Solution {
public:
    int maxSumAfterPartitioning(vector<int>& arr, int k) {
        int n = arr.size();
        vector<int> dp(n);
        dp[0] = arr[0];

        for(int i = 0; i < n; i++) {
            int maxVal = arr[i];
            for(int j = 1; j <= k && i - j + 1 >= 0; j++) {  // for taking maximum between partitions
                maxVal = max(maxVal, arr[i - j + 1]); // calc max

                if(i - j >= 0) {
                    dp[i] = max(dp[i], j * maxVal + dp[i - j]);
                } else {
                    dp[i] = max(dp[i], j * maxVal + 0);
                }
            }
        }
        return dp[n - 1];
    }
};